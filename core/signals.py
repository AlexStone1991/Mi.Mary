from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from django.conf import settings
from django.db import transaction
import asyncio
import logging

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from core.models import Review, Order
from core.mistral import is_bad_review
from core.telegram_bot import send_messages

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from users.models import CustomUser

logger = logging.getLogger(__name__)

api_key = settings.TELEGRAM_BOT_API_KEY
user_id = settings.TELEGRAM_USER_ID
user_id_2 = settings.TELEGRAM_USER_ID_2

@receiver(m2m_changed, sender=Order.services.through)
def notify_telegram_on_order_create(sender, instance, action, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ m2m_changed –¥–ª—è –º–æ–¥–µ–ª–∏ Order.
    """
    try:
        if action == 'post_add' and kwargs.get('pk_set'):
            logger.info(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: {instance.id}")
            transaction.on_commit(lambda: send_order_notification(instance))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

def send_order_notification(instance):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    try:
        list_services = [service.name for service in instance.services.all()]
        appointment_date = instance.appointment_date.strftime("%d.%m.%Y") if instance.appointment_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        tg_markdown_message = f"""
======–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!======
–ò–º—è: {instance.client_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {instance.phone}
–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {appointment_date}
–£—Å–ª—É–≥–∏: {', '.join(list_services)}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {instance.comment}
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: http://127.0.0.1:8000/admin/core/order/{instance.id}/change/
#–∑–∞–∫–∞–∑
"""
        asyncio.run(send_messages(api_key, tg_markdown_message, user_id, user_id_2))
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {instance.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

@receiver(post_save, sender=Review)
def handle_new_review(sender, instance, created, **kwargs):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
    """
    if created and not kwargs.get('raw', False):
        logger.info(f"üí¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤: {instance.id}")
        transaction.on_commit(lambda: process_review(instance))

def process_review(instance):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞: –º–æ–¥–µ—Ä–∞—Ü–∏—è + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–∑—ã–≤–∞ {instance.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        Review.objects.filter(id=instance.id).update(status="ai_moderating")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ {instance.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ai_moderating")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ AI
        is_bad = is_bad_review(instance.text)
        logger.info(f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ {instance.id}: {'bad' if is_bad else 'good'}")
        
        if is_bad:
            # –û—Ç–∑—ã–≤ –ø–ª–æ—Ö–æ–π - –æ—Ç–∫–ª–æ–Ω—è–µ–º
            Review.objects.filter(id=instance.id).update(
                status="ai_rejected", 
                is_published=False
            )
            logger.info(f"‚ùå –û—Ç–∑—ã–≤ {instance.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            # –û—Ç–∑—ã–≤ —Ö–æ—Ä–æ—à–∏–π - –æ–¥–æ–±—Ä—è–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º
            Review.objects.filter(id=instance.id).update(
                status="ai_approved", 
                is_published=True  # –ü–†–ê–í–ò–õ–¨–ù–û–ï –∏–º—è –ø–æ–ª—è!
            )
            logger.info(f"‚úÖ –û—Ç–∑—ã–≤ {instance.id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º instance —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        updated_instance = Review.objects.get(id=instance.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        send_review_notification(updated_instance)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞ {instance.id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Review.objects.filter(id=instance.id).update(status="ai_moderating")

def send_review_notification(instance):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ"""
    try:
        status_emoji = "‚úÖ" if instance.status == "ai_approved" else "‚ùå" if instance.status == "ai_rejected" else "‚è≥"
        publication_status = "–û–ü–£–ë–õ–ò–ö–û–í–ê–ù" if instance.is_published else "–ù–ï –û–ü–£–ë–õ–ò–ö–û–í–ê–ù"
        
        tg_plain_message = f"""
=== –ù–û–í–´–ô –û–¢–ó–´–í! {status_emoji} ===
–ò–º—è: {instance.client_name}
–†–µ–π—Ç–∏–Ω–≥: {instance.rating} ‚≠ê
–°—Ç–∞—Ç—É—Å: {instance.get_status_display()}
–ü—É–±–ª–∏–∫–∞—Ü–∏—è: {publication_status}
–¢–µ–∫—Å—Ç: {instance.text[:200]}{'...' if len(instance.text) > 200 else ''}
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: http://127.0.0.1:8000/admin/core/review/{instance.id}/change/
#–æ—Ç–∑—ã–≤ #{instance.status}
"""
        asyncio.run(send_messages(api_key, tg_plain_message, user_id, user_id_2, None))
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ {instance.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")



@receiver(post_save, sender=CustomUser)
def notify_telegram_on_user_create(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ post_save –¥–ª—è –º–æ–¥–µ–ª–∏ CustomUser.
    """
    if created and not kwargs.get('raw', False):
        logger.info(f"üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {instance.id}")
        transaction.on_commit(lambda: send_user_notification(instance))

def send_user_notification(instance):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        tg_markdown_message = f"""
=== –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! ===
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {instance.username}
Email: {instance.email if instance.email else '–ù–µ —É–∫–∞–∑–∞–Ω'}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {instance.date_joined.strftime("%d.%m.%Y %H:%M")}
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: http://127.0.0.1:8000/admin/users/customuser/{instance.id}/change/
#–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
"""
        asyncio.run(send_messages(tg_markdown_message, api_key, user_id, user_id_2))
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {instance.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")